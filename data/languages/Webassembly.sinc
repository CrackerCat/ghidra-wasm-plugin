# sleigh include file for Skeleton language instructions

define token opcode (8)
	opc = (0,7)
;

################################################################
# Macros
################################################################

macro push32(val32) {
	SP = SP - 4;
	*:4 SP = val32; 
}

macro pop32(ret32) {
	ret32 = *:4 SP;
	SP = SP + 4; 
}

macro push64(val64) {
	SP = SP - 8;
	*:8 SP = val64; 
}

macro pop64(ret64) {
	ret64 = *:8 SP;
	SP = SP + 8; 
}

################################################################

define pcodeop trap;
define pcodeop get_global;

@include "Leb128.sinc"

localidx: ULeb128 is ULeb128 {
	export ULeb128;
}

globalidx: ULeb128 is ULeb128 {
	export ULeb128;
}

memalign: "align="^ULeb128 is ULeb128 {
	export ULeb128;
}

memoffset: "offset="^ULeb128 is ULeb128 {
	export ULeb128;
}

################################################################

:unreachable is opc=0x00 {
	trap();
}

:nop is opc=0x01 {}

#TODO: 0x02-0x11

#TODO: 0xd0-0xd2

:drop is opc=0x1a unimpl
:select is opc=0x1b unimpl

#TODO: select t* 0x1c

:local.get localidx is opc=0x20; localidx unimpl
:local.set localidx is opc=0x21; localidx unimpl
:local.tee localidx is opc=0x22; localidx unimpl
:global.get globalidx is opc=0x23; globalidx {
	val:8 = get_global(globalidx);
	push64(val);
}
:global.set globalidx is opc=0x24; globalidx unimpl

#TODO: table instructions

:i32.load { memalign memoffset } is opc=0x28; memalign; memoffset unimpl
#TODO: more mem instrs

:i32.const ULeb128 is opc=0x41; ULeb128 {
	val:4 = ULeb128:4;
	push32(val);
}

:i64.const ULeb128 is opc=0x42; ULeb128 {
	val:8 = ULeb128:8;
	push64(val);
}
