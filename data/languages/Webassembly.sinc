# sleigh include file for Skeleton language instructions

define token opcode (8)
	opc = (0,7)
;

define token byteval (8)
	bytev = (0,7)
;

################################################################
# Macros
################################################################

macro push32(val32) {
	SP = SP - 4;
	*:4 SP = val32; 
}

macro pop32(ret32) {
	ret32 = *:4 SP;
	SP = SP + 4; 
}

macro push64(val64) {
	SP = SP - 8;
	*:8 SP = val64; 
}

macro pop64(ret64) {
	ret64 = *:8 SP;
	SP = SP + 8; 
}

################################################################

define pcodeop trap;
define pcodeop get_global;
define pcodeop popcnt;
define pcodeop clz;
define pcodeop ctz;

@include "Leb128.sinc"

localidx: ULeb128 is ULeb128 {
	export ULeb128;
}

globalidx: ULeb128 is ULeb128 {
	export ULeb128;
}

typeidx: ULeb128 is ULeb128 {
	export ULeb128;
}

tableidx: ULeb128 is ULeb128 {
	export ULeb128;
}

elemidx: ULeb128 is ULeb128 {
	export ULeb128;
}

reftype: "reftype="^bytev is bytev {
	export bytev;
}

memalign: "align="^ULeb128 is ULeb128 {
	export ULeb128;
}

memoffset: "offset="^ULeb128 is ULeb128 {
	export ULeb128;
}

################################################################

indent: "" is indent_lvl=0 {}
indent: " . "^indent is indent [ indent_lvl = indent_lvl - 1; ]{}

# This outputs one less indentation than indent, use this when the indent_lvl is increased by the current instruction
inc_indent: "" is indent_lvl=1 | indent_lvl=0 {}
inc_indent: " . "^inc_indent is inc_indent [ indent_lvl = indent_lvl-1; ]{}

@define INC_INDENT "inc_indent [ indent_lvl = indent_lvl + 1; globalset(inst_next, indent_lvl); ]"

:""^indent^"unreachable" is opc=0x00; indent {
	trap();
}

:""^indent^"nop" is opc=0x01; indent {}

:""^inc_indent^"block" "blocktype="^ULeb128 is opc=0x02; ULeb128; $(INC_INDENT) unimpl
:""^inc_indent^"loop" "blocktype="^ULeb128 is opc=0x03; ULeb128; $(INC_INDENT) unimpl
:""^inc_indent^"if" "blocktype="^ULeb128 is opc=0x04; ULeb128; $(INC_INDENT) unimpl
:""^inc_indent^"else" is opc=0x05; inc_indent unimpl

:""^indent^"end" is opc=0x0b; indent_lvl=0; indent unimpl
:""^indent^"end" is opc=0x0b; indent [ indent_lvl = indent_lvl - 1; globalset(inst_next, indent_lvl); ] unimpl

:""^indent^"br" ULeb128 is opc=0x0c; ULeb128; indent unimpl
:""^indent^"br_if" ULeb128 is opc=0x0d; ULeb128; indent unimpl
#TODO: br_table
#:""^indent^"br_table" is opc=0x0e; ULeb128; indent [br_table_count=ULeb128;] unimpl
:""^indent^"return" is opc=0x0f; indent unimpl
:""^indent^"call" ULeb128 is opc=0x10; ULeb128; indent unimpl
:""^indent^"call_indirect" typeidx tableidx is opc=0x11; typeidx; tableidx; indent unimpl

:""^indent^"ref.null" reftype is opc=0xd0; reftype; indent unimpl
:""^indent^"ref.is_null" is opc=0xd1; indent unimpl
:""^indent^"ref.func" ULeb128 is opc=0xd2; ULeb128; indent unimpl

:""^indent^"drop" is opc=0x1a; indent unimpl
:""^indent^"select" is opc=0x1b; indent unimpl

#TODO: select t* 0x1c

:""^indent^"local.get" localidx is opc=0x20; localidx; indent unimpl
:""^indent^"local.set" localidx is opc=0x21; localidx; indent unimpl
:""^indent^"local.tee" localidx is opc=0x22; localidx; indent unimpl
:""^indent^"global.get" globalidx is opc=0x23; globalidx; indent {
	val:8 = get_global(globalidx);
	push64(val);
}
:""^indent^"global.set" globalidx is opc=0x24; globalidx; indent unimpl

#TODO: table instructions
:""^indent^"i32.const" ULeb128 is opc=0x41; ULeb128; indent {
	val:4 = ULeb128:4;
	push32(val);
}

:""^indent^"i64.const" ULeb128 is opc=0x42; ULeb128; indent {
	val:8 = ULeb128:8;
	push64(val);
}

@include "BasicOps.sinc"

#TODO: 0x3f
